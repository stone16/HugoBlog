=# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.


You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information

# Scratchpad

## Current Task: Create a Hugo blog project

### Requirements:
- Host on GitHub Pages with custom domain
- Integrate analytics platform
- Enable user comments

### Plan:
[X] Initialize a new Hugo site
[X] Choose and configure a suitable theme
[X] Set up basic site structure and configuration
[X] Configure for GitHub Pages deployment
[X] Add analytics integration (Google Analytics)
[X] Add commenting system (Disqus)
[X] Set up custom domain configuration (CNAME)
[X] Create sample content
[X] Test locally
[X] Push to GitHub repository

### Progress:
- Created a new Hugo site called "stometa-blog"
- Installed the PaperMod theme
- Configured the site with the user's personal details
- Created basic content structure (about page and first post)
- Set up GitHub Actions workflow for automatic deployment
- Added CNAME file for custom domain configuration
- Integrated Disqus for comments
- Added Google Analytics template
- Created a README file for the repository
- Tested the site locally (running on http://localhost:1313)
- Pushed the site to GitHub repository: git@github.com:stone16/HugoBlog.git

### Next Steps for the User:
1. Go to GitHub repository settings and enable GitHub Pages
2. Configure DNS for custom domain (stometa.top) to point to GitHub Pages
3. Set up a Disqus account and update the shortname in layouts/partials/comments.html
4. Set up Google Analytics and update the measurement ID in layouts/partials/analytics.html